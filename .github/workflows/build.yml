name: 构建吧
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [RelWithDebInfo, Debug]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    # 检出代码
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        ref: 'v1.3.12'
    # 设置 MSVC 开发环境
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    # 生成 Makefiles
    - name: Generating Makefiles
      shell: bash
      run: |
        export enable_ccache=off

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        export skia_arch=x64

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/Release-$skia_arch
    # 编译代码
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    # 运行 C++ 测试
    - name: Running C++ Tests
      shell: bash
      run: |
        cd build && ctest --output-on-failure
    # 运行 CLI 测试
    - name: Running CLI Tests
      if: ${{ matrix.scripting == 'lua' }}
      shell: bash
      run: |
        # ...existing code...
    # 创建发布
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.3.12
        release_name: v1.3.12 - $(date -u "+%Y-%m-%d %H:%M:%S")
        body: 计算机永远的神
        draft: false
        prerelease: false
    # 上传构建产物
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: path/to/your/artifact.zip
        asset_name: artifact.zip
        asset_content_type: application/zip
